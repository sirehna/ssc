sudo: false
dist: trusty

language: c++

git:
  submodules: false

services:
  - docker

env:
  global:
  - DOCKER_USERNAME=gjacquenot
  - secure: "R6iNMz54usAq4qGX+8k8YfGyJ0oQpGf7ReqHCZStCzDiUJ+daYZgaNE4iXWkslMun8uG1USTBJAYKUuZWLtE0Z8k0qog8rL8ayXV5nJXdZ9XJSKVakGioIGoL28EwDe9HNuZ5v1xfwjl9z/1EO93bRoYifqqaE8QDdUqgMyWivAdanPVTM3Ro5tAWADnwS5ITYDh4iE8hQwLZDa8GeVCdJhJT4zmnmTa2a2oBZ12uBdWJ1V40Et0O54LSEt2vgtuuafp889dqlhXTzlvQ3rmn2IdoyzxCNBTzL75MTxAvF/8S6YGa91OsjKeJ3qgAJwHtzm1pvSTmzbAeTLAYqf2k0jtffAQS211K33KQnGS5d3DIIGoQYpzBT96mfRWbdOYIjGgbmHlplBfESbZpa30QQAvf7UP7BM4TEntmD+unYu+NdDvl8HpqXSL7sxHJYbC22xCrfG+A6qSQZJspi6Hc/hg3zDoDrqu4f06T0+1vr67Tl9/PVBhzU/ajM9wIA1z9vtSOg3FsMfbEtRMsoE+Lui2pdvTKYfPJqSZOe0GCIblr+tr/wFuvnYQZrjz8SmBDmQVI9q33XUihKronnA9UlDoKxLM1AVoADh/x+MEUjCaVOCCK3vuf28qrftLSh3X0QHkYy2SG7RRhDZk7r6osr4tVekAVJx6DihLkPMbPZM="

matrix:
  include:
    - name: "Deb release"
      env: BUILD_TYPE=Release  BUILD_DIR=build_deb CPACK_GENERATOR=DEB DOCKER_IMAGE=gjacquenot/ssc_build        BOOST_ROOT=/opt/boost
    - name: "Deb coverage"
      env: BUILD_TYPE=Coverage BUILD_DIR=build_deb CPACK_GENERATOR=DEB DOCKER_IMAGE=gjacquenot/ssc_build        BOOST_ROOT=/opt/boost
    - name: "Win Release cross compilation"
      env: BUILD_TYPE=Release  BUILD_DIR=build_win CPACK_GENERATOR=ZIP DOCKER_IMAGE=gjacquenot/ssc_build_win64  BOOST_ROOT=/usr/src/mxe/usr/x86_64-w64-mingw32.static.posix

before_install:
  - docker pull $DOCKER_IMAGE || true

script:
  - if [[ "$BUILD_TYPE" == "Coverage" ]];
    then
    ci_env=`bash <(curl -s https://codecov.io/env)`;
    else
    ci_env=;
    fi
  - docker run $ci_env --rm -v /etc/group:/etc/group:ro -v /etc/passwd:/etc/passwd:ro -u $( id -u $USER ):$( id -g $USER ) -v $(pwd):/opt/share -w /opt/share $DOCKER_IMAGE /bin/bash -c \
       "rm -rf /opt/share/ssc/google-test &&
        cp -rf /opt/googletest /opt/share/ssc/google-test &&
        rm -rf /opt/share/ssc/eigen &&
        cp -rf /opt/eigen /opt/share/ssc/eigen &&
        rm -rf /opt/share/ssc/yaml-cpp &&
        cp -rf /opt/yaml_cpp /opt/share/ssc/yaml-cpp &&
        cp /opt/share/ssc/CMakeLists_yaml_cpp.txt /opt/share/ssc/yaml-cpp/CMakeLists.txt &&
        rm -rf /opt/share/ssc/websocketpp &&
        cp -rf /opt/websocketpp /opt/share/ssc/websocketpp &&
        rm -rf /opt/share/ssc/f2c &&
        cp -rf /opt/libf2c /opt/share/ssc/f2c &&
        cd /opt/share/ssc/f2c &&
        sed 's/typedef long int integer/typedef int integer/g' f2c.h0 > f2c.h &&
        cp signal1.h0 signal1.h &&
        cp sysdep1.h0 sysdep1.h &&
        cd .. &&
        cp CMakeLists_f2c.txt f2c/CMakeLists.txt &&
        rm -rf /opt/share/ssc/geographiclib &&
        cp -rf /opt/geographiclib /opt/share/ssc/geographiclib &&
        cd /opt/share/ssc/geographiclib &&
        echo IF\(CMAKE_SIZEOF_VOID_P EQUAL 8\) >> src/CMakeLists.txt &&
        echo     IF\(UNIX AND NOT WIN32\) >> src/CMakeLists.txt &&
        echo         SET\(CMAKE_C_FLAGS "\\\""\\\${CMAKE_C_FLAGS} -fPIC"\\\""\) >> src/CMakeLists.txt &&
        echo         SET\(CMAKE_CXX_FLAGS "\\\""\\\${CMAKE_CXX_FLAGS} -fPIC"\\\""\) >> src/CMakeLists.txt &&
        echo         SET\(CMAKE_Fortran_FLAGS "\\\""\\\${CMAKE_Fortran_FLAGS} -fPIC"\\\""\) >> src/CMakeLists.txt &&
        echo     ENDIF\(\) >> src/CMakeLists.txt &&
        echo ENDIF\(\) >> src/CMakeLists.txt &&
        echo add_library \(Geographic_object OBJECT \\\${SOURCES} \\\${HEADERS}\) >> src/CMakeLists.txt &&
        cd /opt/share/ssc &&
        mkdir -p $BUILD_DIR &&
        cd $BUILD_DIR &&
        cmake -Wno-dev
          -G Ninja
          -DCPACK_GENERATOR=$CPACK_GENERATOR
          -DCMAKE_BUILD_TYPE=$BUILD_TYPE
          -DCMAKE_INSTALL_PREFIX:PATH=/opt/ssc
          -DIPOPT_ROOT:PATH=/opt/CoinIpopt
          -DBOOST_ROOT:PATH=$BOOST_ROOT
          /opt/share/ssc &&
        ninja package &&
        ./run_all_tests &&
        if [[ "$BUILD_TYPE" == "Coverage" ]];
        then
        echo "Coverage";
        gprof run_all_tests gmon.out > gprof_res.txt;
        bash <(curl -s https://codecov.io/bash);
        fi
        "

after_success:
- if [ "$TRAVIS_BRANCH" == "master" ] && [ "$BUILD_TYPE" == "Release" ];
  then
  docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD;
  cp ssc/build_deb/ssc.deb ci/.;
  cd ci;
  cd ssc_deb;
  docker build --tag gjacquenot/ssc -f Dockerfile .;
  docker push gjacquenot/ssc;
  cd ..;
  cd ..;
  fi

# travis setup releases
# https://docs.travis-ci.com/user/deployment
# https://docs.travis-ci.com/user/deployment#conditional-releases-with-on
deploy:
  provider: releases
  api_key:
    secure: OHuqTi6NfB19u4PA2WwdNp4aDrHI4nXo8j4jgtCkpD3cX1UnXkDX86sDpktHWbtqbWkMYKQlNvRdRWcQUMIcvtJPPxF89msuDAPwGsBiXVAifsFSESD4CZzv0LQ0Cjcn0BLU5VDobMfAhbQf7ADH6S1Ie07Bb9Bfo0lsvjrkpDB8tw0oG5sILQ1n4SR1ZMSczRCHqRR449keMi0bcj6sexTlbgtJENTQa7va4ro3V7n/96/eGUu4zj7j2/ppP+lMYG1VeoGJX3AmuC7n/d1+VNG4l11ItAluRmwTnBAcN/D9zSwMKoBbVDmAFw+Eur++P/yow/Dsn9UOy8YGhqmB/Wtb9FlGkNHb2zg5pig5sUjtrMKHc7HWcl/u3AGZ9FIfQLwzwzFyHVbW6xsjiIEn3e797elJsEKh5Ds6y8ZwNtbResrSoSWebgh+q0ujMFlg4nOKnv9SeOXtB4IWVtjXafdZhpAlpy1YjHAbrw5Q+PcBWra2k5sDk/1RslxIJvEQy133ZGxuxCSrjfHGnp0rG+jvBQrzKwmmr7/gjCxTLcbYIB400MYGeP7CXoEvTI6Mhb58GPKfaoSCx7CxyG2kR2c7RAV/tz2l+hoPbov8sKWpQswAx6Yye7IDgDvhPf2CI72eFqLnEyIQOwF+kvKo8bjkV9vrvlw9fh0uMe2woTw=
  skip_cleanup: true
  file: ssc/build_deb/ssc.deb
  on:
    tags: true
    repo: Gjacquenot/ssc
    branch: master
    condition: $BUILD_TYPE = Release
