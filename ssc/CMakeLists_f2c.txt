SET(MISC_WITHOUT_MAIN
  f77vers.c i77vers.c s_rnge.c abort_.c exit_.c
  getenv_.c signal_.c s_stop.c system_.c cabs.c ctype.c
  derf_.c derfc_.c erf_.c erfc_.c sig_die.c)

SET(MISC ${MISC_WITHOUT_MAIN} main.c getarg_.c iargc_.c  s_paus.c uninit.c)

SET(POW pow_ci.c pow_dd.c pow_di.c pow_hh.c pow_ii.c pow_ri.c pow_zi.c pow_zz.c)
SET(CX  c_abs.c c_cos.c c_div.c c_exp.c c_log.c c_sin.c c_sqrt.c)
SET(DCX z_abs.c z_cos.c z_div.c z_exp.c z_log.c z_sin.c z_sqrt.c)
SET(REAL r_abs.c r_acos.c r_asin.c r_atan.c r_atn2.c r_cnjg.c r_cos.c
  r_cosh.c r_dim.c r_exp.c r_imag.c r_int.c
  r_lg10.c r_log.c r_mod.c r_nint.c r_sign.c
  r_sin.c r_sinh.c r_sqrt.c r_tan.c r_tanh.c)
SET(DBL d_abs.c d_acos.c d_asin.c d_atan.c d_atn2.c
  d_cnjg.c d_cos.c d_cosh.c d_dim.c d_exp.c
  d_imag.c d_int.c d_lg10.c d_log.c d_mod.c
  d_nint.c d_prod.c d_sign.c d_sin.c d_sinh.c
  d_sqrt.c d_tan.c d_tanh.c)
SET(INT i_abs.c
  i_dim.c i_dnnt.c i_indx.c i_len.c i_mod.c i_nint.c i_sign.c
  lbitbits.c lbitshft.c)
SET(HALF h_abs.c h_dim.c h_dnnt.c h_indx.c h_len.c h_mod.c h_nint.c h_sign.c)
SET(CMP l_ge.c l_gt.c l_le.c l_lt.c hl_ge.c hl_gt.c hl_le.c hl_lt.c)
SET(EFL ef1asc_.c ef1cmc_.c)
SET(CHAR f77_aloc.c s_cat.c s_cmp.c s_copy.c)
SET(I77 backspac.c close.c dfe.c dolio.c due.c endfile.c err.c
  fmt.c fmtlib.c ftell_.c iio.c ilnw.c inquire.c lread.c lwrite.c
  open.c rdfmt.c rewind.c rsfe.c rsli.c rsne.c sfe.c sue.c
  typesize.c uio.c util.c wref.c wrtfmt.c wsfe.c wsle.c wsne.c xwsne.c)
SET(QINT pow_qq.c qbitbits.c qbitshft.c ftell64_.c)
#GJ SET(TIME dtime_.c etime_.c)
SET(TIME)

SET(C_FLAGS "")
IF(CMAKE_SIZEOF_VOID_P EQUAL 8) # If on a 64 bit machine
    IF(UNIX AND NOT WIN32) # If on Linux
        SET(C_FLAGS "-fPIC")
        SET(CMAKE_C_FLAGS "-fPIC")
        SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC")
        SET(CMAKE_Fortran_FLAGS "${CMAKE_Fortran_FLAGS} -fPIC")
    ENDIF()
ENDIF()

# If you get an error compiling dtime_.c or etime_.c, try adding
# -DUSE_CLOCK to the CFLAGS assignment above; if that does not work,
# omit ${TIME} from OFILES  assignment below.

# To get signed zeros in write statements on IEEE-arithmetic systems,
# add -DSIGNED_ZEROS to the CFLAGS assignment below and add signbit.c
# to the end of the OFILES  assignment below.

# For INTEGER*8 support (which requires system-dependent adjustments to
# f2c.h), add ${QINT} to the OFILES  assignment below...
ADD_EXECUTABLE(arithchk arithchk.c)
if(UNIX)
    TARGET_LINK_LIBRARIES(arithchk m)
ENDIF()
SET_TARGET_PROPERTIES(arithchk PROPERTIES COMPILE_DEFINITIONS
    "NO_FPINIT;NO_LONG_LONG")
ADD_CUSTOM_COMMAND(
    OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/arith.h"
    COMMAND arithchk > arith.h
    DEPENDS arithchk
)

SET(OFILES
        ${MISC} ${POW} ${CX} ${DCX} ${REAL} ${DBL} ${INT}
        ${HALF} ${CMP} ${EFL} ${CHAR} ${I77} ${TIME})

SET(OFILES_WITHOUT_MAIN
        ${MISC_WITHOUT_MAIN} ${POW} ${CX} ${DCX} ${REAL} ${DBL} ${INT}
        ${HALF} ${CMP} ${EFL} ${CHAR} ${I77} ${TIME})

IF(WIN32)
    ADD_DEFINITIONS(-D_COMPLEX_DEFINED)
ENDIF()
#include_directories(${CLAPACK_SOURCE_DIR}/F2CLIBS/libf2c)
#include_directories(${CLAPACK_BINARY_DIR}/F2CLIBS/libf2c)
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR})

ADD_LIBRARY(f2c STATIC ${OFILES_WITHOUT_MAIN} ${CMAKE_CURRENT_BINARY_DIR}/arith.h)
ADD_LIBRARY(f2c_object OBJECT ${OFILES_WITHOUT_MAIN})

#set_property(TARGET f2c PROPERTY PREFIX lib)
#install_library(f2c)
SET(F2C_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR} CACHE PATH "Path to F2C include directory")